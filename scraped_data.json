{
  "title": "blog one",
  "content": "To add the fetching logic using your route router.get('/Post/:id', postController.getSinglePost), you will need to integrate the API call into the BlogPost component. Here's how you can do it using useEffect and axios to fetch the post data:\n\nSet up API call logic: You'll use useEffect to fetch the post when the component mounts. The useParams hook from react-router-dom can be used to get the post ID from the URL.\n\nState management: You'll need state for storing the post data and handling loading or error states.\n\nHereâ€™s the updated BlogPost component with the fetching logic:\n\ntsx\nCopy\nEdit\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { format } from 'date-fns';\n\ntype Author = {\nname: string;\navatar: string;\nbio: string;\n};\n\ntype PostDetails = {\nid: number;\ntitle: string;\ncontent: string;\ncoverImage: string;\npublishedAt: string;\nauthor: Author;\n};\n\nfunction BlogPost() {\nconst { id } = useParams<{ id: string }>(); // Get the post ID from the URL\nconst [post, setPost] = useState<PostDetails | null>(null);\nconst [loading, setLoading] = useState<boolean>(false);\nconst [error, setError] = useState<string | null>(null);\n\nuseEffect(() => {\nif (id) {\nsetLoading(true);\naxios\n.get(`/Post/${id}`)\n.then((response) => {\nsetPost(response.data); // Set the post data from the API response\nsetLoading(false);\n})\n.catch((err) => {\nsetError('Failed to fetch post');\nsetLoading(false);\n});\n}\n}, [id]);\n\nif (loading) {\nreturn <div className=\"flex justify-center items-center h-screen w-screen\"><p className=\"text-2xl text-white\">Loading...</p></div>;\n}\n\nif (error) {\nreturn <div className=\"flex justify-center items-center h-screen w-screen\"><p className=\"text-2xl text-white\">Error: {error}</p></div>;\n}\n\nif (!post) {\nreturn <div className=\"flex justify-center items-center h-screen w-screen\"><p className=\"text-2xl text-white\">Post not found.</p></div>;\n}\n\nreturn (\n<article className=\"max-w-4xl mx-auto px-4 py-20\">\n<img\nsrc={post.coverImage}\nalt={post.title}\nclassName=\"w-full h-[400px] object-cover rounded-xl mb-8\"\n/>\n<h1 className=\"text-4xl font-bold mb-6 dark:text-white text-black/80\">{post.title}</h1>\n\n<div className=\"flex items-center gap-4 mb-8 text-gray-600 dark:text-gray-400\">\n<img\nsrc={post.author.avatar}\nalt={post.author.name}\nclassName=\"w-12 h-12 rounded-full\"\n/>\n<div>\n<div className=\"font-semibold\">{post.author.name}</div>\n<div className=\"text-sm\">{post.author.bio}</div>\n<time className=\"text-sm\" dateTime={post.publishedAt}>\n{format(new Date(post.publishedAt), 'MMMM d, yyyy')}\n</time>\n</div>\n</div>\n\n<div className=\"prose dark:prose-invert max-w-none dark:text-white text-black/80\">\n{post.content.split('\\n').map((paragraph, index) => (\n<p key={index} className=\"mb-4\">{paragraph}</p>\n))}\n</div>\n</article>\n);\n}\n\nexport default BlogPost;\nKey Changes:\nuseParams: This hook grabs the id from the URL, which you can use to fetch the correct post.\nuseState: The post data (post), loading state (loading), and error state (error) are stored in the component's state.\nuseEffect: Once the id is available, it makes the API call to fetch the post data from the backend.\nAPI Call: The API call is made using axios.get to fetch the post data from the backend (/Post/:id).\nError Handling:\nDisplays a loading message while fetching.\nDisplays an error message if fetching fails.\nDisplays a \"Post not found\" message if no post data is available after fetching.\nBackend API Route:\nMake sure your backend route (/Post/:id) is set up properly to handle the request and return the post data.",
  "date": "No date found",
  "author": "Unknown author"
}